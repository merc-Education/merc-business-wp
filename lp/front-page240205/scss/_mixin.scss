@charset "UTF-8";
// 関数

// Round（四捨五入）
@function round_decimal($number, $digits: 4) {
    @return to_fixed($number, $digits, "round");
}

// Ceil（切り上げ）
@function cell_decimal($number, $digits: 4) {
    @return to_fixed($number, $digits, "seil");
}

// Floor（切り下げ）
@function floor_decimal($number, $digits: 4) {
    @return to_fixed($number, $digits, "floor");
}

@function to_fixed($number, $digits: 2, $round: "round") {
    $n: 1;

    // $number must be a number
    @if type-of($number) !=number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    // $digits must be a unitless number
    @if type-of($digits) !=number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @for $i from 1 through $digits {
        $n: $n * 10;
    }

    @if $round== "round" {
        @return round($number * $n) / $n;
    } @else if $round== "ceil" {
        @return ceil($number * $n) / $n;
    } @else if $round== "floor" {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $round } is undefined keyword.';
        @return $number;
    }
}

// mixin

// breakpoints
$breakpoints: (
    // 最近のスマホ～
    "m": "screen and (min-width: 813px)",
    "l": "screen and (min-width: 1400px)",
) !default;

// breakpoint - min-width
@mixin mq($breakpoint: m) {
    @media #{map-get($breakpoints, $breakpoint)} {
        @content;
    }
}

// フォントサイズをremに変換
@mixin fs($size: 16, $default: 10) {
    $rem: $size / $default;
    $remsize: floor_decimal($rem);
    font-size: $size + px;
    font-size: $remsize + rem;
}

// vw系

// font-size
@mixin vwfs($size: 16, $windowWidth: 375) {
    $vw: $size / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    font-size: $size + px;
    font-size: $vwsize + vw;
}

// width
@mixin vww($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    width: $width + px;
    width: $vwsize + vw;
}

// height
@mixin vwh($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    height: $width + px;
    height: $vwsize + vw;
}

// margin
@mixin vwm($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin: $vwsize + vw;
}

@mixin vwmt($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-top: $vwsize + vw;
}

@mixin vwmb($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-bottom: $vwsize + vw;
}

@mixin vwml($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-left: $vwsize + vw;
}

@mixin vwmr($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-right: $vwsize + vw;
}

@mixin vwmtb($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-top: $vwsize + vw;
    margin-bottom: $vwsize + vw;
}

@mixin vwmlr($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    margin-left: $vwsize + vw;
    margin-right: $vwsize + vw;
}

// padding
@mixin vwp($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding: $vwsize + vw;
}

@mixin vwpt($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-top: $vwsize + vw;
}

@mixin vwpb($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-bottom: $vwsize + vw;
}

@mixin vwpl($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-left: $vwsize + vw;
}

@mixin vwpr($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-right: $vwsize + vw;
}

@mixin vwptb($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-top: $vwsize + vw;
    padding-bottom: $vwsize + vw;
}

@mixin vwplr($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    padding-left: $vwsize + vw;
    padding-right: $vwsize + vw;
}

// position
@mixin vwt($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    top: $vwsize + vw;
}

@mixin vwb($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    bottom: $vwsize + vw;
}

@mixin vwl($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    left: $vwsize + vw;
}

@mixin vwr($width, $windowWidth: 375) {
    $vw: $width / $windowWidth * 100;
    $vwsize: cell_decimal($vw);
    right: $vwsize + vw;
}


// letter-spacing
@mixin ls($size) {
    letter-spacing: $size / 1000 + em;
}

// line-height
@mixin lh($fsize, $lheight) {
    line-height: $lheight / $fsize;
}